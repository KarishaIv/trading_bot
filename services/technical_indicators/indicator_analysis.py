import matplotlib.pyplot as plt
import pandas as pd
from aiogram.types import FSInputFile
from services.technical_indicators.load_data import fetch_foreign_data, fetch_moex_data
from services.technical_indicators.calculate_indicators import calculate_indicators
from keyboards.reply import get_keyboard_for_user
from aiogram import Bot


def evaluate_signals(df):
    latest = df.iloc[-1]
    prev = df.iloc[-2]
    ratings = {}

    ratings['SMA10'] = 1 if latest['SMA10'] < latest['Close'] else -1
    ratings['SMA20'] = 1 if latest['SMA20'] < latest['Close'] else -1
    ratings['EMA10'] = 1 if latest['EMA10'] < latest['Close'] else -1
    ratings['EMA20'] = 1 if latest['EMA20'] < latest['Close'] else -1

    if latest['RSI'] < 30 and latest['RSI_Change'] > 0:
        ratings['RSI'] = 1
    elif latest['RSI'] > 70 and latest['RSI_Change'] < 0:
        ratings['RSI'] = -1
    else:
        ratings['RSI'] = 0


    ratings['MACD'] = 1 if latest['MACD'] > latest['Signal'] else -1

    ratings['Stoch'] = 1 if latest['%K'] < 20 and prev['%K'] < prev['%D'] and latest['%K'] > latest['%D'] else -1 if latest['%K'] > 80 and prev['%K'] > prev['%D'] and latest['%K'] < latest['%D'] else 0

    ratings['CCI'] = 1 if latest['CCI'] < -100 and latest['CCI'] > prev['CCI'] else -1 if latest['CCI'] > 100 and latest['CCI'] < prev['CCI'] else 0

    ratings['ADX'] = 1 if latest['ADX'] > 20 and latest['+DI'] > latest['-DI'] else -1 if latest['ADX'] > 20 and latest['+DI'] < latest['-DI'] else 0

    total_score = sum(ratings.values()) / len(ratings)

    if total_score >= 0.1:
        overall_rating = "üîº –ü–æ–∫—É–ø–∫–∞"
    else:
        overall_rating = "üîΩ –ü—Ä–æ–¥–∞–∂–∞"

    return ratings, overall_rating

async def send_indicator_analysis(bot: Bot, user_id, ticker, stock_type):
    if stock_type == "foreign":
        df = fetch_foreign_data(ticker)
    else:
        df = fetch_moex_data(ticker)

    if df is None or df.empty:
        await bot.send_message(user_id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}.")
        return

    df = calculate_indicators(df)
    ratings, overall_rating = evaluate_signals(df)

    df_ratings = pd.DataFrame(ratings.items(), columns=['–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä', '–°–∏–≥–Ω–∞–ª'])
    df_ratings['–°–∏–≥–Ω–∞–ª'] = df_ratings['–°–∏–≥–Ω–∞–ª'].map({1: "–ü–æ–∫—É–ø–∫–∞", -1: "–ü—Ä–æ–¥–∞–∂–∞", 0: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})

    plt.figure(figsize=(10, 5))
    plt.bar(df_ratings['–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä'], df_ratings['–°–∏–≥–Ω–∞–ª'].map({"–ü–æ–∫—É–ø–∫–∞": 1, "–ü—Ä–æ–¥–∞–∂–∞": -1, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 0}),
            color=['green' if x == '–ü–æ–∫—É–ø–∫–∞' else 'red' if x == '–ü—Ä–æ–¥–∞–∂–∞' else 'gray' for x in df_ratings['–°–∏–≥–Ω–∞–ª']])
    plt.axhline(0, color="black", linestyle="--")
    plt.title(f"–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {ticker}")
    plt.xticks(rotation=45)
    plt.xlabel("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    plt.ylabel("–°–∏–≥–Ω–∞–ª")
    plt.grid(True)

    image_path = f"/tmp/{ticker}_indicators.png"
    plt.savefig(image_path)
    plt.close()

    await bot.send_photo(user_id, FSInputFile(image_path),     caption=(
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ {ticker}</b>\n\n"
        "<b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã</b>: SMA, EMA, RSI, MACD, –°—Ç–æ—Ö–∞—Å—Ç–∏–∫, CCI, ADX\n\n"
        "üü© <b>–ü–æ–∫—É–ø–∫–∞</b> ‚Äì —Å–∏–≥–Ω–∞–ª –∫ —Ä–æ—Å—Ç—É\n"
        "üü• <b>–ü—Ä–æ–¥–∞–∂–∞</b> ‚Äì —Å–∏–≥–Ω–∞–ª –∫ –ø–∞–¥–µ–Ω–∏—é\n"
        "‚¨úÔ∏è <b>–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ</b> ‚Äì –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å\n\n"
        f"üîé <b>–û–±—â–∏–π –≤—ã–≤–æ–¥</b>: {overall_rating}"
    ),
    parse_mode="HTML", reply_markup=get_keyboard_for_user(user_id))

