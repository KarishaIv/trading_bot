from aiogram.enums import ParseMode
from aiogram import Router, types

from keyboards.reply import (
    get_foreign_stock_keyboard,
    get_russian_stock_keyboard,
    get_stock_type_keyboard
)
import yfinance as yf
from services.stock_info import get_stock_info
from services.price_prediction.price_prediction import predict_price
from services.technical_indicators.indicator_analysis import send_indicator_analysis
from config import user_data
import tensorflow as tf
from datetime import datetime, timedelta
from config import  MODEL_PATH_LSTM
from keyboards.reply import get_news_keyboard
from aiogram.types import FSInputFile
from services.images_analysis.generate_image import generate_cnn_analysis_image
from services.images_analysis.prediction_cnn import predict_cnn_from_image
from keyboards.reply import get_keyboard_for_user
import requests


lstm_model = tf.keras.models.load_model(MODEL_PATH_LSTM)
router = Router()

def is_valid_yahoo_ticker(ticker: str) -> bool:
    try:
        info = yf.Ticker(ticker).info
        return bool(info) and "longName" in info
    except Exception:
        return False


def is_valid_moex_ticker(ticker: str) -> bool:
    ticker = ticker.upper()
    end = datetime.today()
    start = end - timedelta(days=1)

    url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json"
    params = {
        "from": start.strftime("%Y-%m-%d"),
        "till": end.strftime("%Y-%m-%d"),
        "interval": 24,
        "iss.meta": "off"
    }

    try:
        response = requests.get(url, params=params, timeout=5)
        if response.status_code != 200:
            return False

        data = response.json()
        return bool(data.get("candles", {}).get("data"))

    except Exception:
        return False


@router.message()
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip().upper()


    if user_id not in user_data:
        user_data[user_id] = {"type": None, "ticker": None}
        await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –∫–∞–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:", reply_markup=get_stock_type_keyboard())
        return

    if text == "üá∑üá∫ –†–û–°–°–ò–ô–°–ö–ò–ï –ö–û–ú–ü–ê–ù–ò–ò":
        user_data[user_id]["type"] = "russian"
        user_data[user_id]["ticker"] = None
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER, GAZP):")
        return

    elif text == "üá∫üá∏ –ò–ù–û–°–¢–†–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò":
        user_data[user_id]["type"] = "foreign"
        user_data[user_id]["ticker"] = None
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL, TSLA):")
        return

    if user_data[user_id]["type"] is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∞–∫—Ü–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:")
        return


    if user_data[user_id]["ticker"] is None:
        if user_data[user_id]["type"] == "foreign":
            if is_valid_yahoo_ticker(text):
                user_data[user_id]["ticker"] = text
                await message.answer(f"‚úÖ –¢–∏–∫–µ—Ä {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_foreign_stock_keyboard())
            else:
                await message.answer("–Ø –Ω–µ –Ω–∞—à–µ–ª —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            if is_valid_moex_ticker(text):
                user_data[user_id]["ticker"] = text
                await message.answer(f"‚úÖ –¢–∏–∫–µ—Ä {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                     reply_markup=get_russian_stock_keyboard())
            else:
                await message.answer("–Ø –Ω–µ –Ω–∞—à—ë–ª —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    ticker_symbol = user_data[user_id]["ticker"]
    stock_type = user_data[user_id]["type"]


    if text == "‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò":
        if stock_type == "foreign":
            company_info = get_stock_info(ticker_symbol)
            await message.answer(company_info, parse_mode=ParseMode.HTML, reply_markup=get_foreign_stock_keyboard())
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π", reply_markup=get_foreign_stock_keyboard())
    elif text == "üìä –ê–ù–ê–õ–ò–ó –¢–ï–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í":
        await send_indicator_analysis(message.bot, user_id, ticker_symbol, stock_type)
        return
    elif text == "üìà –ü–†–û–ì–ù–û–ó –¶–ï–ù–´":
        if lstm_model is None:
            await message.answer("–û—à–∏–±–∫–∞: LSTM –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return

        target_date = datetime.today()

        predicted_price, actual_price = predict_price(lstm_model, ticker_symbol, target_date, stock_type)


        if predicted_price == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã {ticker_symbol}.", reply_markup=get_keyboard_for_user(user_id))
            return

        response = (
            f"üìà <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã {ticker_symbol} –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n"
            f"üîÆ <b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {predicted_price:.2f} {('—Ä—É–±.' if stock_type == 'russian' else '$')}\n"
            f"üíµ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞:</b> {actual_price:.2f} {('—Ä—É–±.' if stock_type == 'russian' else '$')}\n"
        )
        await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=get_keyboard_for_user(user_id))



    elif text == "üñºÔ∏è –ê–ù–ê–õ–ò–ó –ì–†–ê–§–ò–ö–ê":
        if user_id not in user_data or not user_data[user_id].get("ticker"):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏")
            return

        ticker = user_data[user_id]["ticker"]
        stock_type = user_data[user_id]["type"]
        end_date = datetime.today().strftime("%Y-%m-%d")
        start_date = (datetime.today() - timedelta(days=45)).strftime("%Y-%m-%d")

        image_path, last_price = generate_cnn_analysis_image(ticker, start_date, end_date, stock_type)
        if image_path is None:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {ticker}.")
            return

        prediction = predict_cnn_from_image(image_path)
        forecast = "–¶–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è" if prediction == "UP" else "–¶–µ–Ω–∞ —É–ø–∞–¥–µ—Ç"
        caption = (
            f"üìä –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ {ticker}\n\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n"
        )
        await message.answer_photo(photo=FSInputFile(image_path), caption=caption, parse_mode=ParseMode.HTML, reply_markup=get_keyboard_for_user(user_id))


    elif text == "üì∞ –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=get_news_keyboard())

    elif text == "üîô –í–ï–†–ù–£–¢–¨–°–Ø –ö –í–´–ë–û–†–£ –ê–ö–¶–ò–ô":
        user_data[user_id] = {"type": None, "ticker": None}
        await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –∫–∞–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:", reply_markup=get_stock_type_keyboard())
        return

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


